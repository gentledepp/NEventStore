<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly name="System.Runtime.Serialization" #>
<#@ Assembly name="$(TargetPath)" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Runtime.Serialization" #> 
using System;
using System.Collections.Generic;

namespace NEventStore.Serialization.AcceptanceTests 
{
	public class KnownTypesProvider
	{
		public static IEnumerable<Type> Provide() 
		{
<#
foreach(var type in MessageTypeProvider.GetKnownEventTypes()){#>
			yield return typeof(<#=type.FullName.Replace("+",".")#>);
<#}
#>

			yield break;
		}
	}
}
<#+
 public static class MessageTypeProvider
    {
		static string[] ignored = new string[]{
			"Microsoft", "System"
		};
        public static Type[] GetKnownEventTypes()
        {
            var types = AppDomain.CurrentDomain.GetAssemblies()
				.Where(a => !ignored.Any(i => a.GetName().Name.StartsWith(i)))
                .SelectMany(s => 
				{
					try
					{
						return s.GetExportedTypes().Where(t => (t.GetCustomAttributes(typeof(DataContractAttribute), true).Any())
							 && t.IsAbstract == false);
					}
					catch(Exception x)
					{
						return Enumerable.Empty<Type>();
					}
				})
                .ToArray();
            return types;
        }
    }
#>
